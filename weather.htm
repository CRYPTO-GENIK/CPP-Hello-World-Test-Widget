<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Weather Widget</title>
  <style>
    :root {
      /* Fallback colors */
      --primary: #6366f1;
      --secondary: #8b5cf6;
      --accent: #f59e0b;
      --surface: #1e293b;
      --text: #f1f5f9;
    }
    * {
      margin: 0;
      padding: 0;
      box-sizing: border-box;
    }
    body {
      background: transparent;
      color: var(--text);
      font-family: system-ui, -apple-system, sans-serif;
      padding: 16px;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      width: 100%;
    }
    .weather-container {
      /* background: var(--surface); */ /* Removed for transparency */
      padding: 0; /* Adjusted for responsiveness */
      border-radius: 16px;
      /* border: 1px solid rgba(255, 255, 255, 0.1); */ /* Removed for cleaner look */
      width: 100%;
      text-align: center;
    }
    .current-weather {
      display: flex;
      flex-wrap: wrap; /* Allow wrapping on small screens */
      align-items: center;
      justify-content: center; /* Center items when wrapped */
      gap: 16px;
      margin-bottom: 16px;
    }
    .current-temp {
      font-family: var(--font-header, system-ui, sans-serif);
      font-size: 2.5rem; /* Reduced font size */
      font-weight: 700;
      color: var(--primary);
      line-height: 1;
    }
    .current-details {
      text-align: center; /* Center text for better wrapping */
    }
    .location {
      font-family: var(--font-subheader, system-ui, sans-serif);
      font-size: 1.1rem; /* Reduced font size */
      font-weight: 600;
    }
    .condition {
      font-family: var(--font-body, system-ui, sans-serif);
      font-size: 0.9rem; /* Reduced font size */
      opacity: 0.8;
    }
    .forecast {
      display: none; /* Hidden by default */
      grid-template-columns: repeat(auto-fit, minmax(50px, 1fr)); /* More compact grid */
      gap: 12px;
      margin-top: 16px;
      padding-top: 16px;
      border-top: 1px solid rgba(255,255,255,0.1);
    }
    .forecast-day {
      display: flex;
      flex-direction: column;
      align-items: center;
      gap: 4px;
    }
    .day-name {
      font-weight: 600;
      font-size: 0.8rem;
    }
    .day-temp {
      color: var(--accent);
      font-weight: 500;
      font-size: 0.9rem;
    }
  </style>
</head>
<body>
  <div class="weather-container">
    <div class="current-weather">
      <div class="current-temp" id="currentTemp"></div>
      <div class="current-details">
        <div class="location" id="location"></div>
        <div class="condition" id="condition"></div>
      </div>
    </div>
    <div class="forecast" id="forecast">
      <!-- Forecast will be injected here -->
    </div>
  </div>

  <script>
    const params = new URLSearchParams(window.location.search);
    const root = document.documentElement;

    // 1. Apply Theme Colors
    const themeColors = ['primary', 'secondary', 'accent', 'surface', 'text'];
    themeColors.forEach(color => {
      const value = params.get(color);
      if (value) {
        root.style.setProperty(`--${color}`, value);
      }
    });

    // 2. Load and Apply Fonts
    const fontHeader = params.get('fontHeader');
    const fontSubheader = params.get('fontSubheader');
    const fontBody = params.get('fontBody');

    // Create a Google Fonts URL from the font families provided
    const fontsToLoad = [fontHeader, fontSubheader, fontBody]
      .filter(Boolean) // Remove null/undefined entries
      .filter((font, index, self) => self.indexOf(font) === index); // Get unique fonts

    if (fontsToLoad.length > 0) {
      const fontUrl = `https://fonts.googleapis.com/css2?family=${fontsToLoad.map(f => f.replace(/ /g, '+')).join('&family=')}&display=swap`;
      const link = document.createElement('link');
      link.rel = 'stylesheet';
      link.href = fontUrl;
      document.head.appendChild(link);
    }

    // 3. Set CSS Custom Properties for Fonts
    const style = document.createElement('style');
    style.innerHTML = `
      :root {
        --font-header: "${fontHeader || 'system-ui, sans-serif'}";
        --font-subheader: "${fontSubheader || 'system-ui, sans-serif'}";
        --font-body: "${fontBody || 'system-ui, sans-serif'}";
      }

      h1, h2, h3, .font-header { font-family: var(--font-header); }
      h4, h5, h6, .font-subheader { font-family: var(--font-subheader); }
      body, p, div, span, a { font-family: var(--font-body); }
    `;
    document.head.appendChild(style);

    // Widget configuration
    const config = {
      zipCode: params.get('zipCode') || '90210',
      units: params.get('units') || 'imperial',
      showForecast: params.get('showForecast') === 'true'
    };

    // Mock data based on config
    const weatherData = {
      '90210': { imperial: { temp: 72, unit: '°F', condition: 'Sunny', forecast: [68, 70, 75, 73] }, metric: { temp: 22, unit: '°C', condition: 'Sunny', forecast: [20, 21, 24, 23] } },
      '10001': { imperial: { temp: 65, unit: '°F', condition: 'Cloudy', forecast: [62, 60, 68, 66] }, metric: { temp: 18, unit: '°C', condition: 'Cloudy', forecast: [17, 16, 20, 19] } },
      'default': { imperial: { temp: 68, unit: '°F', condition: 'Partly Cloudy', forecast: [65, 67, 72, 70] }, metric: { temp: 20, unit: '°C', condition: 'Partly Cloudy', forecast: [18, 19, 22, 21] } }
    };

    const data = weatherData[config.zipCode] || weatherData['default'];
    const displayData = data[config.units];

    // Update UI
    document.getElementById('currentTemp').textContent = `${displayData.temp}${displayData.unit}`;
    document.getElementById('location').textContent = `Zip: ${config.zipCode}`;
    document.getElementById('condition').textContent = displayData.condition;

    if (config.showForecast) {
      const forecastEl = document.getElementById('forecast');
      forecastEl.style.display = 'grid';
      const days = ['Mon', 'Tue', 'Wed', 'Thu'];
      let forecastHTML = '';
      for (let i = 0; i < 4; i++) {
        forecastHTML += `
          <div class="forecast-day">
            <span class="day-name">${days[i]}</span>
            <span class="day-temp">${displayData.forecast[i]}${displayData.unit}</span>
          </div>
        `;
      }
      forecastEl.innerHTML = forecastHTML;
    }
  </script>
</body>
</html>